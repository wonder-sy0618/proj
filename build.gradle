import java.text.SimpleDateFormat;
import java.util.regex.Pattern;

apply plugin: 'java'
apply plugin: 'eclipse'


// 参数设置
sourceCompatibility = '1.6'
targetCompatibility = '1.6'
groupId = "demo"
artifactId = "proj"
version = '1.0'


// 发布版本
jar {
    manifest {
        attributes 'Implementation-Title': artifactId, 'Implementation-Version': version
    }
}
[compileJava, javadoc, compileTestJava]*.options*.encoding = 'UTF-8'





// 获取并启用Tomcat插件
buildscript {
   repositories {
		jcenter()
	}
	dependencies {
		classpath 'org.gradle.api.plugins:gradle-tomcat-plugin:1.2'
	}
}
apply plugin: 'tomcat'
tomcatRun {
	// more configure : https://github.com/bmuschko/gradle-tomcat-plugin/
	httpPort = 8180
	ajpPort = 8109
	stopPort = 8181
	URIEncoding = 'UTF-8'
	reloadable = true
}
tomcatRunWar {
	// more configure : https://github.com/bmuschko/gradle-tomcat-plugin/
	httpPort = 8180
	ajpPort = 8109
	stopPort = 8181
	URIEncoding = 'UTF-8'
	reloadable = true
}



// 中央库
repositories {
//    maven { url "file://C:\\Users\\Administrator\\git\\repo" }
    maven { url "http://192.168.0.220:8081/nexus/content/groups/public/" }
    maven { url "http://maven.oschina.net/content/groups/public/" }
    maven { url "http://oss.sonatype.org/content/repositories/snapshots/" }
    maven { url "https://raw.githubusercontent.com/wonder-sy0618/repo/master/" }
	mavenCentral()
}

// 忽略包
//configurations.all { 
//	exclude group: "javax.servlet", module: "servlet-api"
//}


// 依赖
dependencies {
	
	// JSON
	compile 'org.codehaus.jackson:jackson-core-asl:1.9.13'
	compile 'org.codehaus.jackson:jackson-core-lgpl:1.9.13'
	compile 'org.codehaus.jackson:jackson-mapper-asl:1.9.13'
	compile 'org.codehaus.jackson:jackson-mapper-lgpl:1.9.13'
	compile 'org.codehaus.jackson:jackson-mapper-lgpl:1.9.13'
	
	// spring
	compile 'org.springframework:spring-context:3.2.13.RELEASE'
	compile 'org.springframework:spring-context-support:3.2.13.RELEASE'
	compile 'org.springframework:spring-core:3.2.13.RELEASE'
	compile 'org.springframework:spring-beans:3.2.13.RELEASE'
	compile 'org.springframework:spring-web:3.2.13.RELEASE'
	compile 'org.springframework:spring-aop:3.2.13.RELEASE'
	compile 'org.springframework:spring-jdbc:3.2.13.RELEASE'
	compile 'org.springframework:spring-aspects:3.2.13.RELEASE'
	compile 'org.springframework:spring-webmvc:3.2.13.RELEASE'
    compile 'org.springframework:spring-tx:3.2.13.RELEASE'
	compile 'org.springframework:spring-portlet:2.0.8'
	compile 'org.springframework:spring-orm:3.2.13.RELEASE'
	compile 'org.springframework:spring-oxm:3.2.13.RELEASE'
	
	
	// spring security
	compile 'org.springframework.security:spring-security-web:3.1.7.RELEASE'
	compile 'org.springframework.security:spring-security-config:3.1.7.RELEASE'
	compile 'com.octo.captcha:jcaptcha:1.0'
	compile 'com.octo.captcha:jcaptcha-api:1.0'
	
	
	// commons
	compile 'commons-collections:commons-collections:3.2'
	compile 'commons-io:commons-io:2.4'
	compile 'commons-beanutils:commons-beanutils:1.9.1'
	compile 'commons-logging:commons-logging:1.1.3'
	compile 'commons-fileupload:commons-fileupload:1.3'
	compile 'com.fasterxml.jackson.core:jackson-annotations:2.4.4'
	compile 'org.apache.commons:commons-lang3:3.3.2'
	
	// utils
	compile 'dom4j:dom4j:1.6.1'
	compile 'jaxen:jaxen:1.1.6'
	compile 'jdom:jdom:1.1'
	compile 'org.freemarker:freemarker:2.3.22'
	
	// jdbc
	compile 'mysql:mysql-connector-java:5.1.25'
	compile 'commons-dbcp:commons-dbcp:1.4'
    compile 'commons-httpclient:commons-httpclient:3.1'
	 
	// test
	compile 'junit:junit:4.9'
	compile 'org.springframework:spring-test:3.2.13.RELEASE'
	
	// orm
	compile 'org.mybatis:mybatis-spring:1.2.0'
	compile 'org.mybatis:mybatis:3.2.2'
	compile 'cglib:cglib-full:2.0.2'
	compile 'org.mybatis:mybatis-ehcache:1.0.0'
	compile 'com.github.pagehelper:pagehelper:3.7.4'
	
	// log
	compile 'org.slf4j:slf4j-api:1.6.5'
	compile 'org.slf4j:slf4j-simple:1.6.5'
	compile 'ch.qos.logback:logback-classic:1.1.3'
	compile 'ch.qos.logback:logback-core:1.1.3'
	
}


// 生成Eclipse支持时，自动生成Deployment Assembly
eclipse.classpath.file.withXml {
	def node = it.asNode();
	for (Node n : node.children()) {
		if ("lib".equals(n.attribute("kind"))) {
			def node_attributes = new Node(n, "attributes");
			def map = [name:"org.eclipse.jst.component.dependency", value:"/WEB-INF/lib"]
			def node_attribute = new Node(node_attributes, "attribute", map);
		}
	}
}
task createProjectDirs << {
   sourceSets*.java.srcDirs*.each { it.mkdirs() }
   sourceSets*.resources.srcDirs*.each { it.mkdirs() }
}
eclipseClasspath.dependsOn createProjectDirs


// 生成myeclipse环境
task myeclipse(dependsOn:['eclipseClasspath', 'eclipseJdt', 'eclipseProject', 'eclipse']) << {
	File mymetadata = file('.mymetadata')
	def writer = new StringWriter()
	def xml = new groovy.xml.MarkupBuilder(writer)
	xml.'project-module'() {
		type('WEB')
		name(artifactId)
		id('myeclipse.' + new Date().getTime())
		'context-root'("/"+artifactId)
		'j2ee-spec'("1.4")
		archive(artifactId+".war")
		attributes() {
			attribute() {
				webrootdir('src/main/webapp')
			}
		}
	}
	mymetadata.getParentFile().mkdirs();
	mymetadata.createNewFile();
	mymetadata.write(writer.toString());
	// 替换classpathentry
	File classpath = file('.classpath');
	classpath.write(
				classpath.text.replaceAll(
					'<classpathentry kind="con" path="melibrary.com.genuitec.eclipse.j2eedt.core.MYECLIPSE_JAVAEE_5_CONTAINER"/>', 
					'<classpathentry kind="con" path="melibrary.com.genuitec.eclipse.j2eedt.core.MYECLIPSE_JAVAEE_5_CONTAINER"/>')
				);
}



// 生成gradle初始化的批处理gradlew.bat
task wrap(type: Wrapper) {
  gradleVersion = '1.11' // 声明使用的 Gradle 版本
  scriptFile = 'gradlew' // 生成的文件名
}


/*
*/
// mybatis 生成器
buildscript {
   repositories {
        mavenRepo url:'https://raw.githubusercontent.com/wonder-sy0618/repo/master/'
		jcenter()
	}
	dependencies {
        classpath 'net.javaw:mybatis:0.1'
	}
}
apply from: 'https://raw.githubusercontent.com/wonder-sy0618/repo/master/com/rever/mybatisPlugin/1.0-SNAPSHOT/mybatis.gradle'
mybatis {
    configFile = 'database/generatorConfig.xml'
}
// 生成前自动删除旧的文件，避免叠加
task removeOldMybatisMapper << {
	new File('src/main/resources/demo/proj/orm/xml/base').listFiles().each { file->
		file.delete();
	}
}
mbGenerator.dependsOn removeOldMybatisMapper
// 生成后按需要改写xml
task rewriterMybatisXml << {
	new File('src/main/resources/demo/proj/orm/xml/base').listFiles().each { file -> 
		if (file.name.endsWith('xml'))  {
			println "rewriter Mybatis Xml >> " + file.name
			def mapper = new XmlSlurper().parse(file)
			// -----------------------------------------------
			// 对insert/insertSelect方法，自动返回key
			def ids = []
			def idcs = []
			mapper.resultMap.id.each { idnode ->
				ids.add(idnode.@property)
				idcs.add(idnode.@column)
			}
			def idarray = ids.join(",")
			def idcarray = idcs.join(",")
			if (idarray.length() > 0) {
				// 写入xml
				mapper.insert.each { insertnode ->
					insertnode.@useGeneratedKeys="true"
					insertnode.@keyProperty=idarray
				}
			}
			// -----------------------------------------------
			// 对selectByExample方法，自动增加OrderBy
			if (idcarray.length() > 0) {
				// 写入xml
				mapper.select.each { selectnode ->
					if (selectnode.@id == 'selectByExample' || selectnode.@id == 'selectByExampleWithBLOBs') {
						selectnode.appendNode (new XmlSlurper().parseText(' <if test="orderByClause == null">\n\t order by '+idcarray+' \n\t</if>'));
					}
				}
			}
			// -----------------------------------------------
			// 更新xml文件
			file.delete();
			def writer = new FileWriter(file)
			def xml = new groovy.xml.StreamingMarkupBuilder().bind() {
				mkp.yieldUnescaped '<?xml version="1.0" encoding="UTF-8"?>\n'   
				mkp.yieldUnescaped '<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >\n'   
				mkp.yield mapper
			}
			groovy.xml.XmlUtil.serialize(xml, writer)
		}
	}
	new File('src/main/java/demo/proj/orm/model').listFiles().each { file -> 
		if (file.name.endsWith('java') && !file.name.endsWith('Example.java'))  {
			println "rewriter Mybatis Model >> " + file.name
			String text = file.text.replaceAll(
				"([\\w\\W]*?)(public\\s*class\\s*[^\\s]*\\s*)(\\{)([\\w\\W]*)", 
				"\$1\nimport java.io.Serializable;\n\n\n\$2 implements Serializable \$3\n\n\tprivate static final long serialVersionUID = 1L;\n\n\$4");
			file.write(text);
		}
	}
}
mbGenerator.finalizedBy rewriterMybatisXml 





